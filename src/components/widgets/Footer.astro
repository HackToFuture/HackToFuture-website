---
import { Icon } from 'astro-icon';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface Links {
  title?: string;
  links: Array<Link>;
}

export interface Props {
  siteName?: string;
  links?: Array<Links>;
  secondaryLinks?: Array<Link>;
  socialLinks?: Array<Link>;
  footNote?: string;
  isDark?: boolean;
}

const { socialLinks = [], footNote = '', isDark = false } = Astro.props;
---

<footer class="relative">
  <div class="absolute inset-0 pointer-events-none -z-[1]" aria-hidden="true">
    <slot name="bg"><div class:list={['absolute inset-0', { 'bg-dark dark:bg-transparent': isDark }]}></div></slot>
  </div>
  <div class:list={['relative max-w-7xl mx-auto px-4 md:px-6 text-default', { dark: isDark }]}>
    <div class="absolute inset-0 pointer-events-none -z-[1]" aria-hidden="true">
      <slot name="bg-inside" />
    </div>
    <div class="md:flex md:items-center md:justify-between py-6 md:py-8">
      {
        socialLinks?.length ? (
          <ul class="flex mb-4 md:order-1 -ml-2 md:ml-4 md:mb-0">
            {socialLinks.map(({ ariaLabel, href, text, icon }) => (
              <li>
                <a
                  class="text-muted hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5 inline-flex items-center"
                  aria-label={ariaLabel}
                  href={href}
                >
                  {icon && <Icon name={icon} class="w-6 h-6 md:w-5 md:h-5" />}
                  <Fragment set:html={text} />
                </a>
              </li>
            ))}
          </ul>
        ) : (
          ''
        )
      }
      <div class="text-sm mr-4 dark:text-slate-400">
        <Fragment set:html={footNote} />
      </div>
    </div>
  </div>
</footer>
